//
//   @variables
// ---------------------------------------------------------
//  _1_foundation/_vars.scss
// ---------------------------------------------------------
//
//  Global variables are defined here
//
// ---------------------------------------------------------

$static-dir: '';




// --------------------------------------------------------
//
//  URLs
//
//  set the base url of the site (helpful for switching
//  between server environments)
//
// --------------------------------------------------------

$baseurl: '../' !default; // typically '/' or '../'




// --------------------------------------------------------
//
//  Dimensions
//
// --------------------------------------------------------

$base-font-size: 18;
$base-line-height: 20 / $base-font-size;

$vertical-rhythm: 10;  // should equal a whole number
$vertical-unit: rem($vertical-rhythm);

$spacing: (
    'xxl': rem(62), // unused
    'xl': rem(50),
    'l': rem(40),
    'm': rem(30),
    's': rem(25),
    'xs': rem(15),
    'xxs': rem(10),
);

// breakpoints - should always be based off of a 16px base
$breakpoints: (
    'xl': em(1100, 16),
    'l': em(960, 16),
    'm': em(769, 16),
    's': em(481, 16)
);

$maxwidth: rem(1180);
$widewidth: rem(1280);
$midwidth: rem(769);




// --------------------------------------------------------
//
//  Typography
//
//  Use @include font-size('xxl'); in your css.
//
// --------------------------------------------------------
//
//  There are two types of font-sizing in Sasspool â€”
//  responsive and static.
//
//  Static sizing sets a specific font-size at a specific
//  breakpoint, while responsive scales the font-size
//  smoothly between a minimum and maximum size.
//
//  The type of sizing used in your project is determined
//  by the `$responsive-typography` variable below.
//
// --------------------------------------------------------
//
//  Static example values:
//
//  $font-sizes: (
//      'l': (
//                              null: (18px, 2),
//                              's': (20px, 1.75)
//                            ),
//      's': (16px, 2),
//
//      'example': (
//                              null: (15px, 1.3),
//                              's': 16px,
//                              'm': (17px, 1.4),
//                              '900px': 18px,
//                              'l': (19px, 1.45),
//                              '1440px': 20px
//                            ),
//      'example2': 15px
//  );
//
//  See http://www.smashingmagazine.com/2015/06/responsive-typography-with-sass-maps/
//  for more information.
//
//  If two values are provided, the first is the font-size
//  and the second is the line height.
//
// --------------------------------------------------------
//
//  Responsive example values:
//
//  $font-sizes: (
//      'l': (
//                              'min-font-size': (15px, 1.5),
//                              'max-font-size': 20px,
//                              'lower-font-range': 's',
//                              'upper-font-range': 1440px
//                            ),
//      's': (16px, 2),
//      'example': 15px
//  );
//
//  See https://github.com/seaneking/postcss-responsive-type
//  for more information.
//
//  If two values are provided for a font-size (not lower or
//  upper font range), the first is the font-size and the
//  second is the line height.
//
// --------------------------------------------------------

$responsive-typography: true;

$font-sizes: (
    'xxl': (
        'min-font-size': (rem(35), .784),
        'max-font-size': rem(125),
        'lower-font-range': 's',
        'upper-font-range': 'xl'
    ),
    'xl': (
        'min-font-size': (rem(20), 1),
        'max-font-size': rem(50),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'l': (
        'min-font-size': (rem(20), 1),
        'max-font-size': rem(40),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'ml': (
        'min-font-size': (rem(27), 1),
        'max-font-size': rem(36),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'm': (
        'min-font-size': (rem(24), 1),
        'max-font-size': rem(32),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'ms': (
        'min-font-size': (rem(20), 1.125),
        'max-font-size': rem(24),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    's': (
        'min-font-size': (rem(18), 1.2),
        'max-font-size': rem(20),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'xs': (
        'min-font-size': (rem(16), 1.1111),
        'max-font-size': rem(18),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'xxs': (rem(12), 1.1667)
);

// alternate line-heights (use for specific placements)
// 24 / 24 = 1
// 24 / 29 = 1.2083
// 40 / 36 = .9
// 40 / 38 = .95
// 40 / 48 = 1.2




// --------------------------------------------------------
//
//  Grid Settings
//
//  These variables are explained in greater detail in
//  _2_layout/_grids.scss
//
// --------------------------------------------------------

$gutter: spacing('m');

$use-silent-classes: false;
$push: false;
$pull: false;

$grid-breakpoints: (
    'small' query('s'),
    'medium' query('m'),
    'large' query('l')
);

$breakpoint-has-widths: ('small', 'medium', 'large');
$breakpoint-has-push: ('small', 'medium', 'large');
$breakpoint-has-pull: ('small', 'medium', 'large');




// --------------------------------------------------------
//
//  Colors
//
//  We use real color names here.  Although naming something
//  like 'brand' is in fact more generic and reusable, we've
//  found that you end up creating variables like $brand-2,
//  $brand-alt, $brand-complimentary etc.  While coding,
//  it's too easy to forget what those mean.
//
//  If the design changes drastically and the brand changes
//  from, let's say, blue to green, just do a global
//  find/replace - that's what text editors are for.
//
//  Base colors from http://clrs.cc
//
// --------------------------------------------------------

// return these colors with a map-get in Sass. Ex. map-get($colors, 'aqua')
// there is also a function to return these colors quickly. Ex. color('aqua')
$colors: (
    // Cool
    'violet': (
        'base': #848dc9,
        'light': #bdcaea,
        'dark': #444a9c
    ),
    'turquoise': (
        'base': #65cbc9,
        'light': #a0dae9,
        'dark': #00b8b3
    ),
    'green': (
        'base': #9fd684,
        'light': #c2e08a,
        'dark': #64bc5f
    ),
    // Warm
    'yellow': (
        'base': #fbe267,
        'light': #f7e1a4,
        'dark': #ffc627
    ),
    'orange': (
        'base': #ff803f,
        'light': #ff9e6e,
        'dark': #e75300
    ),
    'warm-red': (
        'base': #ed245c,
        'light': #ff8080,
        'dark': #c6093b
    ),
    'cool-red': (
        'base': #eb6bb1,
        'lightest': #ebd9d8, // used for default snack gradient
        'light': #fcbbcb,
        'dark': #9e1c66
    ),
    // Browns
    'brown': (
        'base': #934a21,
        'lightest': #f1ebe7, // used for default snack gradient
        'light': #f4dbb2,
        'dark': #5e3327
    ),
    // Grey Scale
    'white': #fff,
    'silver': #f2f2f2,
    'gray': (
        'base': #d2cfd1,
        'dark': #bfbfbf
    ),
    'black': #000,
);




// Assign colors to roles
$body-color: color('white');
$text-color: color('black');

// Now define another set of colors. These will be used to style alerts, inputs and buttons
$placeholder-txt: #b2b2b2;

$error-bg: #ffe6e6;
$error-txt: #e04646;
$error-border: #e04646;

$warning-bg: #fcf7d8;
$warning-txt: #b29804;
$warning-border: #b29804;

$info-bg: #e8f3ff;
$info-txt: #537df6;
$info-border: #537df6;

$success-bg: #dafce1;
$success-txt: #0ca129;
$success-border: #0ca129;




// --------------------------------------------------------
//
//  Texture
//
// --------------------------------------------------------

$border-color: color('gray');
$border-style: solid;
$border-width: 1px;
$border-radius: 3px;




// --------------------------------------------------------
//
//  Z-Index
//
// --------------------------------------------------------

// return these z-index values with a map-get in Sass. Ex. map-get($zindex, 'modal')
// there is also a function to return these values quickly. Ex. zindex('modal')
$zindex: (
    'modal': 900,
    'overlay': 800,
    'dropdown': 700,
    'header': (
       'base': 600,
       'mid': 650,
       'high': 690
    ),
    'footer': 500
);
